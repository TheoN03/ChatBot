import random
import json
import torch
from model import NeuralNetwork
from nltk_utils import bag_of_words, tokenize
import logging


logging.basicConfig(filename='chatbot.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

try:
    with open("intents.json", "r") as fin:
        intents = json.load(fin)
except OSError as err_1:
    logging.error(f"Error loading intents.json: {err_1}")
    exit(1)
    
FILE = "data.pth"
try:
    data = torch.load(FILE)
except OSError as err_2:
    logging.error(f"Error loading model file: {err_2}")
    exit(1)

try:
    input_size = data["input_size"]
    hidden_size = data["hidden_size"]
    output_size = data["output_size"]
    all_words = data["all_words"]
    tags = data["tags"]
    model_state = data["model_state"]

    model = NeuralNetwork(input_size, hidden_size, output_size).to(device)
    model.load_state_dict(model_state)
    model.eval()

    bot_name = "Chef AI"

    def get_response(msg):
        """
        This function generates a response for a given message using a pre-trained neural network model.

        Parameters:
            msg (str): The message input from the user.

        Returns:
            str: The response generated by the chatbot.
        """
        sentence = tokenize(msg)
        X = bag_of_words(sentence, all_words)
        X = X.reshape(1, X.shape[0])
        X = torch.from_numpy(X).to(device)

        output = model(X)
        _, predicted = torch.max(output, dim=1)

        tag = tags[predicted.item()]

        probs = torch.softmax(output, dim=1)
        prob = probs[0][predicted.item()]
        if prob.item() > 0.75:
            for intent in intents["intents"]:
                if tag == intent["tag"]:
                    return random.choice(intent["responses"])

        return "I do not understand..."

except FileNotFoundError:
    logging.error("Model file not found.")
    print("Model file not found.")
except ValueError as err_3:
    logging.error(f"Incomplete data in the model file: {err_3}")
